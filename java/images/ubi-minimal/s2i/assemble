#!/bin/sh
# Global S2I variable setup
source `dirname "$0"`/s2i-setup

# Maven arguments setting up the environment
maven_env_args="-Dmaven.repo.local=${S2I_ARTIFACTS_DIR}/m2"

# =========================================================================
# Helper functions:

function check_error() {
  local label=$1
  local error=$2
  if [ ${error} -ne 0 ]; then
    echo "Aborting due to error code $error for $label"
    exit ${error}
  fi
}

function get_maven_output_dir() {
  local dir=""

  # If multi module build and no ARTIFACT_DIR is set --> error
  if [ x"${ARTIFACT_DIR}" = x ]; then
    echo " ${MAVEN_ARGS} ${MAVEN_ARGS_APPEND}" | grep -q ' -pl'
    if [ $? -eq 0 ]; then
       echo "ARTIFACT_DIR must be set for multi module Maven builds"
       exit 1
    fi
    dir="${S2I_SOURCE_DIR}/target"
  else
    if [ "${ARTIFACT_DIR:0:1}" = "/" ]; then
       echo "ARTIFACT_DIR \"${ARTIFACT_DIR}\" must not be absolute but relative to the source directory"
       exit 1
    fi
    dir="${S2I_SOURCE_DIR}/${ARTIFACT_DIR}"
  fi

  # Normalize dir
  dir=$(echo ${dir} | tr -s /)
  dir=${dir%/}
  # The parent must exist but target/ won't exist yet
  if [ ! -d $(dirname "${dir}"}) ]; then
    echo "Please specify an existing build directory ARTIFACT_DIR (tried '$(dirname "${dir}")' which does not exist)"
    exit 1
  fi
  echo ${dir}
}

function copy_dir() {
  local src=$1
  local dest=$2

  # Copy recursively and preserve ownership: -a
  cp -a ${src}/* ${dest}
}

function copy_artifacts() {
    local dir=$1
    local dest=$2

    cd ${dir}

    local cp_args=${ARTIFACT_COPY_ARGS}
    if [ x"${cp_args}" = x ]; then
        if [ -d "hawt-app" ]; then
            cp_args="-r hawt-app/*"
        elif ls *.war &> /dev/null; then
            cp_args="*.war"
        else
            cp_args="*.jar"
        fi
    fi
    echo "Running: cp -v ${cp_args} ${dest}"
    cp -v ${cp_args} ${dest}
}


# =========================================================================
# Main

echo "=================================================================="
echo "Starting S2I Java Build ....."
[ -d "${DEPLOYMENTS_DIR}" ] || mkdir -p "${DEPLOYMENTS_DIR}"
if [ -f "${S2I_SOURCE_DIR}/pom.xml" ]; then
  echo "S2I source build for Maven detected. Only source build with plain binaries is supported."
 
elif [ -f "${S2I_SOURCE_DIR}/Dockerfile" ]; then
 
  echo "S2I binary build from fabric8-maven-plugin detected. Only source build with plain binaries is supported."


elif ls ${S2I_SOURCE_DIR}/*.gradle* &> /dev/null; then
  echo "S2I source build for Gradle detected, due to presence of a *.gradle* in ${S2I_SOURCE_DIR}. Only source build with plain binaries is supported."
 
else
  echo "S2I source build with plain binaries detected"
  if [ -d "${S2I_SOURCE_DIR}/deployments" ]; then
    default_binary_dir="${S2I_SOURCE_DIR}/deployments"
  else
    default_binary_dir="${S2I_SOURCE_DIR}"
  fi
  binary_dir="${ARTIFACT_DIR:-${default_binary_dir}}"
  # Assuming that the source already contains compiled artefacts
  echo "Copying binaries from ${binary_dir} to ${DEPLOYMENTS_DIR} ..."
  copy_dir ${binary_dir} ${DEPLOYMENTS_DIR}
  check_error "copying ${binary_dir} to ${DEPLOYMENTS_DIR}" $?
fi

# check if this is a fat jar executable archive. SpringBoot fat jars can be exploded
echo "Checking for fat jar archive..."
old_dir=`pwd`
cd "${DEPLOYMENTS_DIR}"
nr_jars=`ls *.jar 2>/dev/null | grep -v '^original-' | wc -l | tr -d '[[:space:]]'`
if [ ${nr_jars} = 1 ]; then
  single_jar=`ls *.jar | grep -v '^original-'`
  echo "Found ${single_jar}..."
  nr_devtools=`unzip -l "${single_jar}" 2>/dev/null | grep -e 'spring-boot-devtools-.*\.jar' | wc -l | tr -d '[[:space:]]'`
  if [ ${nr_devtools} = 1 ]; then
    main_class=`unzip -p "${single_jar}" META-INF/MANIFEST.MF | sed -n 's/Main-Class: \(.*\)$/\1/p' | tr -d '[[:space:]]'`
    echo "Found main class ${main_class}"
    if [[ "${main_class}" =~ org.springframework.boot.loader. ]]; then
      # explosion!!!
      echo "SpringBoot executable jar detected, exploding..."
      unzip -q "${single_jar}"
      # remove fat jar, run script will setup main class, etc. for run-java.sh
      rm "${single_jar}"
      # to support 'oc rsh', set group permissions to be same as the user and set the group to
      # the root group
      chgrp -R 0 .
      chmod -R g=u .
    fi
  fi
fi
cd "${old_dir}"

# Remove java temporary hsperfdata directory owned by the jboss user
rm -rf /tmp/hsperfdata_jboss

echo "... done"
